{"name":"Gradual Typing Bibliography","tagline":"","body":"This bibliography attempts to cover all of the literature on _gradual typing_, defined as safe interoperability between typed and untyped portions of a single program.  It begins with the original work on gradual typing, which was independently presented by four sets of authors in between September 2006 and January 2007, and then covers the extensive subsequent literature, both theoretical and practical.\r\n\r\nThe latter sections cover related work.  First, early work on safe interoperation, such as the work on contracts.  Second, work on type systems (broadly defined) designed to work with existing untyped languages, including recent work done in the context of gradual typing.  Work on type system design that also considers issues of interoperability with untyped programs appears in the main section of the bibliography.\r\n\r\n---\r\n\r\nFor papers written in [Scribble](http://docs.racket-lang.org/scribble/), this\r\nbibliography can be installed as a package and referenced directly from the\r\npaper. Use the following command to install:\r\n\r\n`raco pkg install git://github.com/samth/gradual-typing-bib`\r\n\r\nSample use:\r\n\r\n````\r\n#lang scribble/base\r\n\r\n@(require gradual-typing-bib\r\n          scriblib/autobib)\r\n\r\n@(define-cite ~cite citet generate-bibliography)\r\n\r\nOriginal gradual typing papers\r\n@~cite[st-sfp-2006 thf-dls-2006 mf-toplas-2007 gktff-sfp-2006].\r\n\r\n@generate-bibliography[]\r\n````\r\n\r\n# Gradual Typing\r\n\r\n## The original papers\r\n\r\nThese four papers all independently introduce the fundamental idea of gradual typing: dynamic enforcement of types using contracts.\r\n\r\n##### Gradual typing for functional languages.\r\nJeremy G. Siek and Walid Taha.  \r\nIn Seventh Workshop on Scheme and Functional Programming, University of Chicago Technical Report TR-2006-06, pages 81–92, September 2006.  \r\nhttp://www.cs.colorado.edu/~siek/pubs/pubs/2006/siek06:_gradual.pdf\r\n\r\n##### Interlanguage migration: from scripts to programs.\r\nSam Tobin-Hochstadt and Matthias Felleisen.  \r\nIn OOPSLA ’06: Companion to the 21st annual ACM SIGPLAN Conference on Object Oriented Programming, Systems, Languages, and Applications, pages 964–974. ACM Press, 2006.  \r\nhttp://www.ccs.neu.edu/racket/pubs/dls06-tf.pdf\r\n\r\n##### Operational semantics for multi-language programs\r\nJacob Matthews and Robert Bruce Findler  \r\nPOPL 2007  \r\nSee subsequent version in TOPLAS 2009.  \r\nhttp://www.eecs.northwestern.edu/~robby/pubs/papers/toplas09-mf.pdf\r\n\r\n##### Sage: Hybrid Checking for Flexible Specifications\r\nJessica Gronski, Kenneth Knowles, Aaron Tomb, Stephen N. Freund, and Cormac Flanagan\r\nIn Seventh Workshop on Scheme and Functional Programming, University of Chicago Technical Report TR-2006-06, pages 93-104, September 2006.  \r\nhttp://users.soe.ucsc.edu/~atomb/gronski06sage.pdf\r\n\r\n\r\n## Subsequent work\r\n\r\nEvery paper below here cites at least one of the 4 original papers.\r\n\r\n##### Sage: Unified Hybrid Checking for First-Class Types, General Refinement Types, and Dynamic. (extended report)\r\nKenneth Knowles, Aaron Tomb, Jessica Gronski, Stephen N. Freund, Cormac Flanagan.\r\nTechnical report, May 2007  \r\nhttp://sage.soe.ucsc.edu/sage-tr.pdf\r\n\r\n##### Space-efficient gradual typing. \r\nDavid Herman, Aaron Tomb, and Cormac Flanagan.\r\nIn Proceedings of the Eighth Symposium on Trends in Functional Programming, TFP 2007, pages 1–18, 2008.\r\n(See subsequent journal version.)\r\n\r\n##### Gradual typing for objects.\r\nJeremy G. Siek and Walid Taha.  \r\nIn ECOOP 2007, volume 4609 of\r\nLCNS, pages 2–27. Springer Verlag, August 2007.  \r\nhttp://ecee.colorado.edu/~siek/gradual-obj.pdf\r\n\r\n##### Advanced Macrology and the Implementation of Typed Scheme.\r\nRyan Culpepper, Sam Tobin-Hochstadt, and Matthew Flatt.  \r\nIn Proceedings of the 2007 Workshop on Scheme and Functional Programming, Universit́e Laval Technical Report DIUL-RT-0701, pages 1–13, 2007  \r\nhttp://www.ccs.neu.edu/racket/pubs/scheme2007-ctf.pdf\r\n\r\n##### Well-typed programs can’t be blamed\r\nPhilip Wadler and Robert Bruce Findler  \r\nIn Proceedings of the 2007 Workshop on Scheme and Functional Programming, Universit́e Laval Technical Report DIUL-RT-0701, pages 1–13, 2007  \r\nhttp://www.eecs.northwestern.edu/~robby/pubs/papers/scheme2007-wf.pdf\r\n\r\n##### Evolutionary Programming and Gradual Typing in ECMAScript 41\r\nLars T Hansen\r\nAdobe Systems Technical Report, November 2007  \r\nhttp://www.ecmascript.org/es4/spec/evolutionary-programming-tutorial.pdf\r\n\r\n##### Status report: specifying JavaScript with ML\r\nDavid Herman, Cormac Flanagan\r\nProceedings of the 2007 workshop on Workshop on ML, Pages 47-52, 2007.  \r\nhttp://users.soe.ucsc.edu/~cormac/papers/ml07.pdf\r\n\r\n##### The design and implementation of Typed Scheme.\r\nSam Tobin-Hochstadt and Matthias Felleisen.  \r\nIn POPL ’08: Proceedings of the 35th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, pages 395–406. ACM Press, 2008  \r\nhttp://www.ccs.neu.edu/racket/pubs/popl08-thf.pdf\r\n\r\n##### Safe Cross-Language Inheritance\r\nKathryn E. Gray  \r\nIn proceedings of ECOOP 2008  \r\nhttp://www.cl.cam.ac.uk/~keg29/inheritance-model/inheritance.pdf\r\n\r\n##### Gradual typing with unification-based inference\r\nJeremy G. Siek, Manish Vachharajani  \r\nDLS '08 Proceedings of the 2008 symposium on Dynamic languages, 2008  \r\nhttp://ecee.colorado.edu/~siek/dls08igtlc.pdf\r\n\r\n##### Well-typed programs can’t be blamed\r\nPhilip Wadler and Robert Bruce Findler  \r\nIn ESOP ’09: Proceedings of the Eighteenth European Symposium on Programming, volume 5502 of Lecture Notes in Computer Science, pages 1–16. Springer-Verlag, 2009.\r\n\r\n##### Exploring the Design Space of Higher-Order Casts\r\nJeremy Siek, Ronald Garcia, Walid Taha\r\nIn ESOP ’09: Proceedings of the Eighteenth European Symposium on Programming, volume 5502 of Lecture Notes in Computer Science, pages 17-31. Springer-Verlag, 2009.  \r\nhttp://ecee.colorado.edu/~siek/siek09esop.pdf\r\n\r\n##### A Model of Java/Scheme Interoperability\r\nKathryn E. Gray\r\nChapter of _Semantics Engineering with PLT Redex_\r\nEdited by Robert Bruce Findler, Matthew Flatt, and Matthias Felleisen. MIT Press 2009\r\n\r\n##### Operational semantics for multi-language programs\r\nJacob Matthews and Robert Bruce Findler  \r\nACM Transactions on Programming Languages and Systems, 31(3):1–44, 2009.  \r\nhttp://www.eecs.northwestern.edu/~robby/pubs/papers/toplas09-mf.pdf\r\n\r\n#####  Gradual typing for Featherweight Java.\r\nLintaro Ina and Atsushi Igarashi.\r\nComputer Software, 26(2):18–40, 2009.\r\n\r\nIn Japanese:\r\nFeatherweight Javaのための漸進的型付け\r\nhttps://www.jstage.jst.go.jp/article/jssst/26/2/26_2_2_18/_pdf\r\n\r\n##### Static type inference for Ruby\r\nMichael Furr, Jong-hoon (David) An, Jeffrey S. Foster, and Michael Hicks  \r\nIn SAC ’09: Proceedings of the 2009 ACM Symposium on Applied Computing, pages 1859–1866. ACM Press, 2009\r\n\r\n##### STOP ’09: Proceedings for the 1st workshop on Script to Program Evolution\r\nTobias Wrigstad, Nate Nystrom, and Jan Vitek, editors.  \r\nACM Press 2009\r\n\r\n###### From Soft Scheme to Typed Scheme: Experiences from 20 Years of Script Evolution, and Some Ideas on What Works (Talk)\r\nMatthias Felleisen\r\nInvited talk at STOP 2009\r\nhttp://www.ccs.neu.edu/home/matthias/Presentations/stop.html\r\n\r\n##### Towards gradual typing for generics\r\nLintaro Ina, Atsushi Igarashi  \r\nSTOP '09 Proceedings for the 1st workshop on Script to Program Evolution, 2009  \r\nSee subsequent version in OOPSLA 2011\r\n\r\n##### A theory of typed coercions and its applications\r\nNikhil Swamy, Michael Hicks, Gavin M. Bierman\r\nProceedings of the 14th ACM SIGPLAN international conference on Functional programming, Pages 329-340, 2009\r\n\r\n##### Threesomes, with and without blame\r\nJeremy G. Siek, Philip Wadler  \r\nSTOP '09 Proceedings for the 1st workshop on Script to Program Evolution, 2009  \r\nSee subsequent version in POPL 2010.\r\n\r\n##### Software Hardening: A Research Agenda\r\nWrigstad, Eugster, Field, Nystrom, Vitek  \r\nSTOP '09 Proceedings for the 1st workshop on Script to Program Evolution, 2009  \r\n\r\n##### Cycles without pollution: a gradual typing poem.\r\nSam Tobin-Hochstadt and Robert Bruce Findler.  \r\nSTOP '09 Proceedings for the 1st workshop on Script to Program Evolution, 2009,   pages 47–57\r\n\r\n##### Tests to the left of me, types to the right: how not to get stuck in the middle of a Ruby execution.  \r\nMichael Furr, Jong-hoon (David) An, Jeffrey S. Foster, and Michael Hicks.  \r\nSTOP '09 Proceedings for the 1st workshop on Script to Program Evolution, 2009, pages 14–16.\r\n\r\n##### Thorn: Robust, Concurrent, Extensible Scripting on the JVM.\r\nBard Bloom, John Field, Nathaniel Nystrom, Johan Ostlund, Gregor Richards, Rok Strnisa, Jan Vitek, and Tobias Wrigstad.  \r\nIn OOPSLA, 2009.\r\n\r\n###### Of scripts and programs: tall tales, urban legends, and future prospects\r\nJan Vitek  \r\nInvited talk at DLS 2009\r\nhttp://dl.acm.org/citation.cfm?id=1640134.1640136\r\n\r\n##### Combining Static and Dynamic Typing in Ruby\r\nMichael Furr\r\nPh.D. Thesis, University of Maryland, 2009\r\n\r\n##### Extending Dylan’s Type System for Better Type Inference and Error Detection\r\nHannes Mehnert\r\nDiploma Thesis, Technische Universit ̈at Berlin, October 1, 2009\r\n\r\n##### Typed Scheme: From Scripts to Programs.\r\nSam Tobin-Hochstadt  \r\nPhD Dissertation, Northeastern University, January 2010. \r\n\r\n##### Integrating typed and untyped code in a scripting language.\r\nTobias Wrigstad, Francesco Zappa Nardelli, Sylvain Lebresne, Johan Ostlund, and Jan Vitek.  \r\nIn Symposium on Principles of Programming Languages, 2010.\r\n\r\n##### Threesomes, with and without blame.\r\nJeremy G. Siek and Philip Wadler.  \r\nIn Symposium on Principles of Programming Languages, 2010.\r\n\r\n\r\n###### Adding types to untyped languages\r\nMatthias Felleisen\r\nInvited talk at TLDI '10 Proceedings of the 5th ACM SIGPLAN workshop on Types in language design and implementation  \r\nhttp://dl.acm.org/citation.cfm?id=1708016.1708017\r\n\r\n##### Space-efficient gradual typing\r\nDavid Herman, Aaron Tomb, and Cormac Flanagan\r\nHigher-Order and Symbolic Computation, Vol. 23 No. 2, pages 167-189, 2010\r\n\r\n#####  Adding dynamic types to C#.\r\nGavin Bierman, Erik Meijer, and Mads Torgersen. \r\nIn European Conference on Object-Oriented Programming, ECOOP’10. Springer-Verlag, 2010.\r\n\r\n##### Extending Dylan's type system for better type inference and error detection\r\nHannes Mehnert\r\nProceedings of the 2010 international conference on Lisp, Pages 1-10, 2010\r\n\r\n##### Interoperability in a Scripted World: Putting Inheritance and Prototypes Together\r\nKathryn E. Gray  \r\nFOOL 2010\r\n\r\n##### Blame for All.\r\nAmal Ahmed, Robert Bruce Findler, Jeremy G. Siek, and Philip Wadler.  \r\nIn Symposium on Principles of Programming Languages, January 2011.\r\n\r\n##### Proceedings of the Second Workshop on Script to Program Evolution. \r\nEdited by Robert Bruce Findler\r\nJanuary 2011\r\n\r\n##### Languages as Libraries\r\nSam Tobin-Hochstadt, Vincent St-Amour, Ryan Culpepper, Matthew Flatt, and Matthias Felleisen\r\nPLDI 2011\r\n\r\n\r\n##### Always-available static and dynamic feedback.\r\nM. Bayne, R. Cook, and M.D. Ernst.  \r\nIn International Conference on Software Engineering, 2011.\r\n\r\n##### Gradual typestate.\r\nRoger Wolff, Ronald Garcia, Eric Tanter, and Jonathan Aldrich.  \r\nIn European Conference on Object-Oriented Programming, ECOOP’11. Springer-Verlag, 2011.\r\n\r\n\r\n##### Gradual typing for generics.\r\nLintaro Ina and Atsushi Igarashi.  \r\nIn Proceedings of the 2011 ACM International conference on Object oriented programming systems languages and applications, OOPSLA ’11, 2011.\r\n\r\n##### The impact of optional type information on jit compilation of dynamically typed languages\r\nMason Chang, Bernd Mathiske, Edwin Smith, Avik Chaudhuri, Andreas Gal, Michael Bebenita, Christian Wimmer, Michael Franz\r\nProceedings of the 7th symposium on Dynamic languages, Pages 13-24, 2011\r\n\r\n##### Gradual Information Flow Typing\r\nTim Disney and Cormac Flanagan\r\nInternational Workshop on Scripts to Programs, 2011\r\n\r\n##### Language with a Pluggable Type System and Optional Runtime Monitoring of Type Errors\r\nJukka Lehtosalo and David J. Greaves\r\nInternational Workshop on Scripts to Programs, 2011\r\n\r\n##### Application optimization when using gradual typing\r\nEsteban Allende, Johan Fabry\r\nProceedings of the 6th Workshop on Implementation, Compilation, Optimization of Object-Oriented Languages, Programs and Systems, Article No. 3, 2011\r\n\r\n\r\n##### Foundations for Scripting Languages (Report from Dagstuhl Seminar 12011)\r\nEdited by Robert Hirschfeld, Shriram Krishnamurthi, and Jan Vitek\r\nhttp://www.cs.purdue.edu/homes/jv/pubs/dagstuhl12.pdf\r\n\r\n##### The ins and outs of gradual type inference.\r\nAseem Rastogi, Avik Chaudhuri, and Basil Hosmer.  \r\nIn Proceedings of the 39th annual ACM SIGPLAN-SIGACT symposium on Principles of programming languages, POPL ’12, 2012.\r\n\r\n##### Complete Monitors for Behavioral Contracts. \r\nChristos Dimoulas, Sam Tobin-Hochstadt, and Matthias Felleisen.  \r\nEuropean Symposium on Programming (ESOP), March 2012. \r\n\r\n##### Gradual Ownership Types\r\nI. Sergey, D. Clarke\r\nIn ESOP 2012, LNCS, vol. 7211, pp. 579–599, 2012.\r\n\r\n##### JavaScript as an Embedded DSL\r\nGrzegorz Kossakowski, Nada Amin, Tiark Rompf, and Martin Odersky\r\nIn ESOP 2012, LNCS, vol. 7211, pp. 409–434, 2012.\r\n\r\n##### Practical Permissions for Race-Free Parallelism\r\nEdwin Westbrook, Jisheng Zhao, Zoran Budimli ́c, and Vivek Sarkar\r\nIn ESOP 2012, LNCS, vol. 7211, pp. 614–639, 2012.\r\n\r\n##### Modelyze: a Gradually Typed Host Language for Embedding Equation-Based Modeling Languages\r\nDavid Broman, Jeremy G. Siek\r\nEECS University of California at Berkeley Technical Report No. UCB/EECS-2012-173\r\n\r\n##### Type systems directed programming language evolution: overview and research trends\r\nJaime Niño  \r\nACM-SE '12 Proceedings of the 50th Annual Southeast Regional Conference\r\n\r\nA survey/overview paper\r\n\r\n##### Proceedings of the Third Workshop on Script to Program Evolution. \r\nEdited by Sam Tobin-Hochstadt  \r\nNU CCIS Technical Report NU-CCIS-12-02, June 2012. \r\n\r\n##### Towards Gradual Typing in Jython\r\nMichael M. Vitousek, Shashank Bharadwaj, Jeremy G. Siek  \r\nSTOP 2012\r\n\r\n##### Interpretations of the gradually-typed lambda calculus.\r\nJeremy G. Siek and Ronald Garcia.  \r\nIn Scheme and Functional Programming Workshop, 2012.\r\n\r\n##### Gradual Typing for First-class Classes. \r\nAsumu Takikawa, T. Stephen Strickland, Christos Dimoulas, Sam Tobin-Hochstadt and Matthias Felleisen.  \r\nObject Oriented Programming, Systems, Languages and Applications (OOPSLA), October 2012. \r\n\r\n##### Chaperones and Impersonators: Runtime support for reasonable interposition\r\nT. Stephen Strickland, Sam Tobin-Hochstadt, Robert Bruce Findler and Matthew Flatt.  \r\nObject Oriented Programming, Systems, Languages and Applications (OOPSLA), October 2012. \r\n\r\n##### Constraining Delimited Control with Contracts\r\nAsumu Takikawa, T. Stephen Strickland, Sam Tobin-Hochstadt.  \r\nESOP 2013. \r\n\r\n##### The Blame Theorem for a Linear Lambda Calculus with Type Dynamic\r\nLuminous Fennell,Peter Thiemann\r\nTrends in Functional Programming, LNCS Volume 7829, 2013, pp 37-52 \r\n\r\n##### The Ruby Type Checker \r\nBrianna M. Ren, John Toman, T. Stephen Strickland, Jeffrey S. Foster  \r\nOOPS 2013\r\n\r\n##### The Design and Implementation of Typed Scheme\r\nSam Tobin-Hochstadt and Matthias Felleisen.  \r\nTo appear in Higher-Order and Symbolic Computation. \r\n\r\n##### Gradual Typing for Mutable Objects\r\nJeremy G. Siek, Michael M. Vitousek, and Shashank Bharadwaj.  \r\nUnpublished manuscript, 2012.  \r\nhttp://ecee.colorado.edu/~siek/gtmo.pdf\r\n\r\n##### A Gradual Polymorphic Type System with Subtyping for Prolog\r\nSpyros Hadjichristodoulou and David Warren\r\nWorkshop on Logic-based Programming Environments (WLPE 2012)\r\n\r\n##### Gradual typing for Smalltalk\r\nEsteban Allende, Oscar Callaú, Johan Fabry, Éric Tanter, and Marcus Denker.  \r\nScience of Computer Programming (2013).\r\nhttp://pleiad.dcc.uchile.cl/papers/2013/allendeAl-scp2013.pdf\r\n\r\n##### Cast Insertion Strategies for Gradually-Typed Objects\r\nEsteban Allende, Johan Fabry, Éric Tanter\r\nProceedings of the 9th ACM Dynamic Languages Symposium (DLS 2013), Indianapolis, IN, USA, October 2013, ACM Press\r\nhttp://pleiad.dcc.uchile.cl/papers/2013/allendeAl-dls2013.pdf\r\n\r\n# Early Work on Interoperation\r\n\r\nThese papers all consider the challenges of interoperability between typed and untyped languages, which is at the core of the gradual typing project.  Papers about type checking untyped languages that do not consider interoperation appear in the next section.\r\n\r\n##### Quasi-static Typing\r\nSatish Thatte  \r\nIn Proceedings of the 17th ACM SIGPLAN-SIGACT symposium on Principles of programming languages (POPL '90). ACM, New York, NY, USA, 367-381. \r\n\r\n##### Pluggable type systems.\r\nGilad Bracha.  \r\nIn OOPSLA Workshop on the Revival of Dynamic Languages, 2004.\r\n\r\n##### Contracts for higher-order functions\r\nRobert Bruce Findler and Matthias Felleisen  \r\nIn ICFP ’02: Proceedings of the Seventh ACM SIGPLAN International Conference on Functional Programming, pages 48–59. ACM Press, 2002\r\n\r\n##### BabyJ: From Object Based to Class Based Programming via Types\r\nChristopher Anderson, Sophia Drossopoulou  \r\nProceedings of Workshop on Object Oriented Developments 2003, Electronic Notes in Theoretical Computer Science, Volume 82, Issue 8, October 2003, Pages 53–81\r\n\r\n##### Compiling Java to PLT Scheme\r\nKathryn E. Gray and Matthew Flatt.  \r\nIn Scheme Workshop 2004\r\n\r\n##### Fine-grained interoperability through mirrors and contracts.\r\nKathryn E. Gray, Robert Bruce Findler, and Matthew Flatt.  \r\nIn OOPSLA ’05: Proceedings of the 20th annual ACM SIGPLAN Conference on Object Oriented Programming, Systems, Languages, and Applications, pages 231–245. ACM Press, 2005\r\n\r\n##### Hybrid type checking. \r\nCormac Flanagan.  \r\nIn Conference Record of POPL ’06: The 33th ACM SIGPLAN-SIGACT Symposium on Principles of Programming\r\nLanguages, pages 245–256. ACM Press, 2006.\r\n\r\n##### Towards Customizable Pedagogic Programming Languages\r\nKathryn E. Gray  \r\nPhD Dissertation, University of Utah, School of Computing, August 2006.\r\n\r\n##### Introducing safe unknown types in Java-like languages\r\nGiovanni Lagorio and Elena Zucca\r\nACM Symp. on Applied Computing (SAC 2006), Special Track on Object-Oriented Programming Languages and Systems, 2006\r\n\r\n##### Just: safe unknown types in Java-like languages\r\nGiovanni Lagorio and Elena Zucca\r\nJournal of Object Technology, Vol. 6, No. 2, Special Issue OOPS Track at SAC 2006, February 2007\r\n\r\n# Related\r\n\r\n## Contracts\r\n\r\n##### Unifying Hybrid Types and Contracts.\r\nJessica Gronski, Cormac Flanagan.\r\nTrends in Functional Programming, 2007.\r\n\r\n##### Polymorphic Contracts\r\nJoão Filipe Belo, Michael Greenberg, Atsushi Igarashi, Benjamin C. Pierce \r\nProgramming Languages and Systems, LNCS Volume 6602, 2011, pp 18-37\r\n\r\n## Typing Untyped Languages\r\n\r\nThese papers address the challenges of type checking existing untyped programs and programming languages, but do not address the core gradual type checking concern of interoperability.\r\n\r\n##### User-defined data types as an aid to verifying LISP programs.\r\nRobert Cartwright.  \r\nIn International Conference on Automata, Languages and Programming, pages 228–256, 1976.\r\n\r\n##### Inferring types in Smalltalk\r\nNorihisa Suzuki  \r\nPOPL '81 Proceedings of the 8th ACM SIGPLAN-SIGACT symposium on Principles of programming languages \r\n\r\n##### Creating efficient systems for object-oriented languages\r\nNorihisa Suzuki and Minoru Terada  \r\nPOPL '84 Proceedings of the 11th ACM SIGACT-SIGPLAN symposium on Principles of programming languages \r\n\r\n#####  Static type inference in a dynamically typed language\r\nAlexander Aiken and Brian R. Murphy  \r\nIn POPL ’91: Proceedings of the 18th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, pages 279–290. ACM Press, 1991.\r\n\r\n\r\n##### Soft typing. \r\nRobert Cartwright and Mike Fagan.  \r\nIn PLDI ’91: Proceedings of the ACM SIGPLAN 1991 Conference on Programming Language Design and Implementation, pages 278–292. ACM Press, 1991.\r\n\r\n##### Strongtalk: typechecking Smalltalk in a production environment.\r\nGilad Bracha and David Griswold.  \r\nIn OOPSLA ’93: Proceedings of the 8th annual ACM SIGPLAN Conference on Object Oriented Programming, Systems, Languages, and Applications, pages 215–230. ACM Press, 1993.\r\n\r\n##### Strong Static Type Checking for Functional Common Lisp\r\nRobert Akers  \r\nUniversity of Texas Dissertation, also Computational Logic Inc Technical Report 96  \r\nftp://ftp.cs.utexas.edu/pub/boyer/diss/akers.pdf\r\n\r\n##### Soft typing with conditional types. \r\nAlexander Aiken, Edward L. Wimmers, and T. K. Lakshman   \r\nIn POPL ’94: Proceedings of the 21st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, pages 163–173. ACM Press, 1994\r\n\r\n##### Dynamic typing: Syntax and proof theory.\r\nFritz Henglein.  \r\nScience of Computer Programming, 22(3):197–230, 1994.\r\n\r\n##### Safe polymorphic type inference for a dynamically typed language: translating Scheme to ML. \r\nFritz Henglein and Jakob Rehof.    \r\nIn FPCA ’95: Proceedings of the Seventh International Conference on Functional Programming Languages and Computer Architecture, pages 192–203. ACM Press, 1995.\r\n\r\n##### Infer: A statically-typed dialect of Scheme.\r\nChristopher T. Haynes  \r\nTechnical Report 367, Indiana University, 1995.\r\n\r\n##### Catching bugs in the web of program invariants\r\nCormac Flanagan, Matthew Flatt, Shriram Krishnamurthi, Stephanie Weirich, and Matthias Felleisen  \r\nIn Proceedings of the ACM SIGPLAN 1996 conference on Programming language design and implementation (PLDI '96)  \r\nhttp://www.ccs.neu.edu/racket/pubs/#pldi96-ffkwf\r\n\r\n\r\n##### The Strongtalk Type System for Smalltalk.\r\nGilad Bracha  \r\nOOPSLA96 Workshop on Extending the Smalltalk Language, 1996  \r\nhttp://www.bracha.org/nwst.html\r\n\r\n##### Program Verification through Soft Typing \r\nRobert Cartwright and Matthias Felleisen  \r\nACM Computing Surveys 28, 2 (June 1996)  \r\nhttp://www.ccs.neu.edu/racket/pubs/#cs96-cf\r\n\r\n##### Componential set-based analysis\r\nCormac Flanagan and Matthias Felleisen  \r\nIn Proceedings of the ACM SIGPLAN 1997 conference on Programming language design and implementation (PLDI '97)  \r\nhttp://www.ccs.neu.edu/racket/pubs/#pldi97-ff  \r\n\r\n\r\n##### A practical subtyping system for Erlang. \r\nSimon Marlow and Philip Wadler.  \r\nIn ICFP ’97: Proceedings of the Second ACM SIGPLAN International Conference\r\non Functional Programming, pages 136–149. ACM Press, 1997.\r\n\r\n##### A practical soft type system for Scheme.\r\nAndrew K. Wright and Robert Cartwright. \r\nACM Transactions on Programming Languages and Systems, 19(1):87–152, 1997\r\n\r\n##### A New Way of Debugging LISP Programs \r\nCormac Flanagan and Matthias Felleisen  \r\nIn Lisp in the Mainstream: The 40th Annniversary Conference of Lisp Users.  \r\nBerkeley, November 1998.  \r\nhttp://www.ccs.neu.edu/racket/pubs/#lugm98-ff\r\n\r\n##### Componential set-based analysis\r\nCormac Flanagan and Matthias Felleisen  \r\nACM Trans. Program. Lang. Syst. 21, 2 (March 1999), 370-416  \r\nhttp://www.ccs.neu.edu/racket/pubs/#toplas99-ff  \r\n\r\n##### Revised NISP manual. \r\nDrew McDermott.  \r\nTechnical Report YALE/DCS/RR-642, Yale University, Department of Computer Science, 2004\r\n\r\n##### Starkiller: A static type inferencer and compiler for Python.\r\nMichael Salib.  \r\nMaster’s thesis, Massachusetts Institute of Technology, Cambridge, Massachusetts, 2004.\r\n\r\n#####  A Type Notation for Scheme.\r\nGary T. Leavens, Curtis Clifton, and Brian Dorn.  \r\nTechnical Report 05-18a, Iowa State University, 2005.\r\n\r\n## Type Systems for Gradual-typing\r\n\r\nThis work presents type systems for untyped languages, influenced by gradual typing work on interoperation, but doesn't explicitly deal with typed/untyped interoperation.\r\n\r\n##### Practical Variable-Arity Polymorphism\r\nT. Stephen Strickland, Sam Tobin-Hochstadt, and Matthias Felleisen.  \r\nEuropean Symposium on Programming (ESOP), March 2009. \r\n\r\n##### Static Type Inference for Ruby\r\nMichael Furr, Jong-hoon (David) An, Jeffrey S. Foster, and Michael Hicks  \r\nIn Object-Oriented Program Languages and Systems (OOPS) Track at ACM Symposium on Applied Computing (SAC), pages 1859–1866, Honolulu, Hawaii, March 2009.\r\n\r\n##### Tests to the Left of Me, Types to the Right: How Not to Get Stuck in the Middle of a Ruby Execution (A Demo of Diamondback Ruby)\r\nMichael Furr, Jong-hoon (David) An, Jeffrey S. Foster, and Michael Hicks  \r\nIn 1st International Workshop on Script to Program Evolution (STOP), Genova, Italy, July 2009.\r\n\r\n##### Profile-Guided Static Typing for Dynamic Scripting Languages\r\nMichael Furr, Jong-hoon (David) An, and Jeffrey S. Foster  \r\nIn ACM SIGPLAN International Conference on Object-Oriented Programming, Systems, Languages and Applications (OOPSLA), pages 283–300, Orlando, Floria, October 2009. \r\n\r\n##### Work In Progress: an Empirical Study of Static Typing in Ruby\r\nMark T. Daly, Vibha Sazawal, and Jeffrey S. Foster  \r\nIn Workshop on Evaluation and Usability of Programming Languages and Tools (PLATEAU), Orlando, Florida, October 2009.\r\n\r\n##### Static Typing for Ruby on Rails\r\nJong-hoon (David) An, Avik Chaudhuri, and Jeffrey S. Foster  \r\nIn IEEE/ACM International Conference on Automated Software Engineering (ASE), pages 590–594, Auckland, New Zealand, November 2009. Short paper.\r\n\r\n##### Logical Types for Untyped Languages\r\nSam Tobin-Hochstadt and Matthias Felleisen  \r\nInternational Conference on Functional Programming (ICFP), September 2010. \r\n\r\n##### Dynamic Inference of Static Types for Ruby\r\nJong-hoon (David) An, Avik Chaudhuri, Jeffrey S. Foster, and Michael Hicks  \r\nIn ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages (POPL), pages 459–472, Austin, TX, USA, January 2011.\r\n\r\n##### Position Paper: Dynamically Inferred Types for Dynamic Languages\r\nJong-hoon (David) An, Avik Chaudhuri, Jeffrey S. Foster, and Michael Hicks  \r\nIn 2nd International Workshop on Script to Program Evolution (STOP), Austin, TX, USA, January 2011.\r\n\r\n##### Typing the Numeric Tower \r\nVincent St-Amour, Sam Tobin-Hochstadt, Matthew Flatt and Matthias Felleisen  \r\nSymposium on Practical Aspects of Declarative Languages (PADL), January 2012. \r\n\r\n##### Nested Refinements: A Logic for Duck Typing\r\nRavi Chugh, Patrick M. Rondon, and Ranjit Jhala  \r\nIn Proceedings of the ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages (POPL), pages 231-244, Philadelphia, PA, January 2012. \r\n\r\n##### Status Report: Dependent Types for JavaScript\r\nRavi Chugh, David Herman, Ranjit Jhala\r\nSTOP 2012\r\nSee subsequent OOPSLA paper.\r\n\r\n##### Minigrace: A progress report\r\nMichael Homer and James Noble  \r\nSTOP 2012\r\n\r\n#####  Dependent Types for JavaScript\r\nRavi Chugh, David Herman, and Ranjit Jhala  \r\nIn Proceedings of the ACM SIGPLAN Conference on Object-Oriented Programming, Systems, Languages, and Applications (OOPSLA), pages 587-606, Tucson, AZ, October 2012.\r\n\r\n##### Progressive Types\r\nJoe Gibbs Politz, Hannah Quay-de la Vallee, Shriram Krishnamurthi  \r\nIn Proceedings of the ACM international symposium on New ideas, new paradigms, and reflections on programming and software (Onward! '12)  \r\nhttp://cs.brown.edu/~sk/Publications/Papers/Published/pqk-progressive-types/\r\n\r\n##### A Practical Optional Type System for Clojure\r\nAmbrose Bonnaire-Sergeant  \r\nHonours thesis, University of Western Australia, 2012\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}